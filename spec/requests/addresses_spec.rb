require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe Api::V1::AddressesController, type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Address. As you add validations to Address, be sure to
  # adjust the attributes here as well.

  let(:user) { create(:user) }

  let(:valid_attributes) {
    {city: 'la', zip: '90001', user_id: user.id}
  }

  let(:invalid_attributes) {
    {esh: 'gov', ggg: 'hav'}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # AddressesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Address.create! valid_attributes
      get api_v1_addresses_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      address = Address.create! valid_attributes
      get api_v1_address_url(address), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Address" do
        expect {
          post api_v1_addresses_url,
               params: { address: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Address, :count).by(1)
      end

      it "renders a JSON response with the new address" do
        post api_v1_addresses_url,
             params: { address: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Address" do
        expect {
          post api_v1_addresses_url,
               params: { address: invalid_attributes }, as: :json
        }.to change(Address, :count).by(0)
      end

      it "renders a JSON response with errors for the new address" do
        post api_v1_addresses_url,
             params: { address: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested address" do
        address = Address.create! valid_attributes
        patch api_v1_address_url(address),
             params: { address: {city: 'ny'} }, headers: valid_headers, as: :json
        expect {address.reload}.to change {address.city}.from('la').to('ny')
      end

      it "renders a JSON response with the address" do
        address = Address.create! valid_attributes
        patch api_v1_address_url(address),
              params: { address: {city: 'ny'} }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq("application/json")
      end
    end

    context "with invalid parameters" do
      it "does not update the requested address" do
        address = Address.create! valid_attributes
        patch api_v1_address_url(address),
              params: { address: {esh: 'gov'} }, headers: valid_headers, as: :json
        expect {address.reload}.not_to change {address}
        expect(response.content_type).to eq("application/json")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested address" do
      address = Address.create! valid_attributes
      expect {
        delete api_v1_address_url(address), headers: valid_headers, as: :json
      }.to change(Address, :count).by(-1)
    end
  end
end
